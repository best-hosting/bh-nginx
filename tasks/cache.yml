---

- block:
    - name: cache | Ensure cache directory exists
      file:
        path: "{{ cache_dir }}"
        state: directory

    - name: cache | Stat shares cache
      stat:
        path: "{{ _nginx_shares_cache_file }}"
      register: _nginx_shares_cache_file_stats

    - name: cache | Stat rproxy cache
      stat:
        path: "{{ _nginx_rproxy_cache_file }}"
      register: _nginx_rproxy_cache_file_stats

    - name: cache | Load shares cache
      include_vars:
        file: "{{ _nginx_shares_cache_file }}"
        name: _nginx_shares_read_cache
      when: _nginx_shares_cache_file_stats.stat.exists

    - name: cache | Load rproxy cache
      include_vars:
        file: "{{ _nginx_rproxy_cache_file }}"
        name: _nginx_rproxy_read_cache
      when: _nginx_rproxy_cache_file_stats.stat.exists

    - name: cache | Loaded shares cache
      debug:
        var: _nginx_shares_read_cache

    - name: cache | Loaded rproxy cache
      debug:
        var: _nginx_rproxy_read_cache

  delegate_to: localhost
  run_once: true

- block:
    # FIXME: Here 'combine()''s 'list_merge' strategy implemented manually.
    # Raise ansible version to make most part of this boilerplate redundant.
    - name: cache | Rebuild shares cache for play hosts
      set_fact:
        _nginx_shares_all: >-
          {{ _nginx_shares_all | combine(
                { item.1.vhost :
                  { 'vhost'       : item.1.vhost
                  , 'servers'     : ([item.1.server] + value_servers + cached_servers) | unique
                  , item.1.server : ([item_name]     + value_server  + cached_server)  | unique
                  }
                }
              )
          }}
      vars:
        item_name: >-
          {{ item.0.inventory_hostname }}
        cached_vhost: >-
          {{ _nginx_shares_read_cache[item.1.vhost] | default({}) }}
        cached_server: >-
          {{ cached_vhost[item.1.server] | default([]) }}
        cached_servers: >-
          {{ cached_vhost['servers'] | default([]) }}
        value_vhost: >-
          {{ _nginx_shares_all[item.1.vhost] | default({}) }}
        value_server: >-
          {{ value_vhost[item.1.server] | default([]) }}
        value_servers: >-
          {{ value_vhost['servers'] | default([]) }}
      loop: >-
        {{ hostvars.values() | subelements('_nginx_host_shares', skip_missing=True) }}

    - name: cache | Rebuild rproxy cache for play hosts
      set_fact:
        _nginx_rproxy_all: >-
          {{ _nginx_rproxy_all | combine(
                { item.1.vhost :
                  { 'vhost'       : item.1.vhost
                  , 'servers'     : ([item.1.server] + value_servers + cached_servers) | unique
                  , item.1.server : ([item_name]     + value_server  + cached_server)  | unique
                  }
                }
              )
          }}
      vars:
        item_name: >-
          {{ item.0.inventory_hostname }}
        cached_vhost: >-
          {{ _nginx_rproxy_read_cache[item.1.vhost] | default({}) }}
        cached_server: >-
          {{ cached_vhost[item.1.server] | default([]) }}
        cached_servers: >-
          {{ cached_vhost['servers'] | default([]) }}
        value_vhost: >-
          {{ _nginx_rproxy_all[item.1.vhost] | default({}) }}
        value_server: >-
          {{ value_vhost[item.1.server] | default([]) }}
        value_servers: >-
          {{ value_vhost['servers'] | default([]) }}
      loop: >-
        {{ hostvars.values() | subelements('_nginx_host_rproxy', skip_missing=True) }}

    - name: cache | Show shares cache for play hosts
      debug:
        var: _nginx_shares_all

    - name: cache | Show rproxy cache for play hosts
      debug:
        var: _nginx_rproxy_all

    - name: cache | Update shares cache
      set_fact:
        _nginx_shares_cache: >-
          {{ _nginx_shares_read_cache | combine(_nginx_shares_all) }}

    - name: cache | Update rproxy cache
      set_fact:
        _nginx_rproxy_cache: >-
          {{ _nginx_rproxy_read_cache | combine(_nginx_rproxy_all) }}

  run_once: true

- block:
    - name: cache | Check for vhosts used for both share and rproxy
      assert:
        that:
          - not same_vhosts
        fail_msg: >-
          {{ "Some vhosts are used for both share and rproxy: " + same_vhosts | join(',')
          }}
      # ' - fix vim highlightning.
      vars:
        same_vhosts: >-
          {{ _nginx_shares_cache.keys() | intersect(_nginx_rproxy_cache.keys()) }}
      run_once: true

    - name: cache | Check for several hosts using shares in single conf mode
      assert:
        that:
          - vhost_used_by | length == 1
        fail_msg: >-
          {{ "Share vhost '" + item.vhost + "' in single conf mode used by several hosts: "
                + vhost_used_by | join(',') + "."
          }}
      # ' - fix vim highlightning.
      when: not item.split_conf
      vars:
        vhost_used_by: >-
          {{ _nginx_shares_cache[item.vhost][item.server] }}
      loop: >-
        {{ _nginx_host_shares }}

    - name: cache | Check for several hosts using rproxy in single conf mode
      assert:
        that:
          - vhost_used_by | length == 1
        fail_msg: >-
          {{ "Rproxy vhost '" + item.vhost + "' in single conf mode used by several hosts: "
                + vhost_used_by | join(',') + "."
          }}
      # ' - fix vim highlightning.
      when: not item.split_conf
      vars:
        vhost_used_by: >-
          {{ _nginx_rproxy_cache[item.vhost][item.server] }}
      loop: >-
        {{ _nginx_host_rproxy }}

- block:
    - name: cache | Save shares cache
      copy:
        content: "{{ _nginx_shares_cache | to_yaml }}"
        dest: "{{ _nginx_shares_cache_file }}"

    - name: cache | Save rproxy cache
      copy:
        content: "{{ _nginx_rproxy_cache | to_yaml }}"
        dest: "{{ _nginx_rproxy_cache_file }}"

  delegate_to: localhost
  run_once: true

- block:
    - name: cache | Build group of hosts using nginx
      group_by:
        key: "nginx"
      loop: "{{ nginx_host_rproxy + nginx_host_shares }}"

    - name: cache | Build nginx groups by vhost name
      group_by:
        key: "nginx_{{ item.vhost }}"
      loop: "{{ nginx_host_rproxy }}"

    - name: cache | Show host groups
      debug:
        var: groups
      run_once: true

- block:
    - name: cache | Prepare nginx groups yaml
      set_fact:
        groups_yaml: >-
          {{ groups_yaml | combine(
                      { item.key :
                          { 'hosts' : dict(item.value | zip_longest([], fillvalue={})) }
                      }
                    )
          }}
      when: item.key.startswith('nginx')
      loop: "{{ groups | dict2items }}"

    - name: cache | Save nginx groups to inventory
      copy:
        content: "{{ groups_yaml | to_yaml }}"
        dest: "{{ nginx_group_file }}"

  delegate_to: 'localhost'
  run_once: true

