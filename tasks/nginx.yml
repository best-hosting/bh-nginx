---

- block:
    - name: nginx (server) | Install
      package:
        name: 'nginx'
        state: present
      loop: "{{ _nginx_servers }}"
      delegate_to: "{{ item }}"

- block:
    - name: nginx (server) | Create root dir
      file:
        path: "{{ item.root }}"
        state: directory
      loop: "{{ _nginx_vhosts_all }}"
      delegate_to: "{{ item.host }}"

    - name: nginx (server) | Create default index file
      template:
        src: 'index.html'
        force: yes
        backup: yes
        dest: "{{ item.root + '/index.html' }}"
      loop: "{{ _nginx_vhosts_all }}"
      delegate_to: "{{ item.host }}"

    - name: nginx (server) | Create conf include dir
      file:
        path: "{{ item.conf_include_d }}"
        state: directory
      when: item.conf_include_d is defined
      loop: "{{ _nginx_vhosts_all }}"
      delegate_to: "{{ item.host }}"

    - name: nginx (server) | Create nginx vhost config
      template:
        src: 'vhost.conf'
        force: yes
        backup: yes
        dest: "{{ item.dest }}"
      loop: "{{ _nginx_vhosts_all }}"
      delegate_to: "{{ item.host }}"
      notify:
        - restart nginx

- block:
    - name: nginx (server) | Create directory for ssl certificates
      file:
        path: "{{ item.cert | dirname }}"
        state: directory
      loop: "{{ _nginx_vhosts_all }}"
      delegate_to: "{{ item.host }}"

    - name: nginx (server) | Create directory for certificate private keys
      file:
        path: "{{ item.privkey | dirname }}"
        mode: >-
          {{ 750
              if item.privkey | dirname != item.cert | dirname
              else 755
          }}
        state: directory
      loop: "{{ _nginx_vhosts_all }}"
      delegate_to: "{{ item.host }}"

    - name: nginx (server) | Stat certificates
      stat:
        path: "{{ item.cert }}"
      register: nginx_cert_stats
      loop: "{{ _nginx_vhosts_all }}"
      delegate_to: "{{ item.host }}"

    - name: nginx (server) | Stat certificate private keys
      stat:
        path: "{{ item.privkey }}"
      register: nginx_privkey_stats
      loop: "{{ _nginx_vhosts_all }}"
      delegate_to: "{{ item.host }}"

    - name: nginx (server) | Enable vhost
      file:
        src: "{{ item.0.dest }}"
        dest: "{{ item.0.link_to }}"
        state: link
      when: item.1.stat.exists and item.2.stat.exists
      loop: >-
        {{ _nginx_vhosts_all
            | zip(nginx_cert_stats.results, nginx_privkey_stats.results) | list
        }}
      delegate_to: "{{ item.0.host }}"
      notify:
        - restart nginx

- block:
    - name: nginx (server) | Install python passlib
      package:
        name: 'python-passlib'
        state: present
      loop: "{{ _nginx_host_shares }}"
      delegate_to: "{{ item.server }}"

    - name: nginx (server) | Create host's share root dir
      file:
        path: "{{ item.root }}"
        state: directory
      when: item.root is defined
      loop: "{{ _nginx_host_shares }}"
      delegate_to: "{{ item.server }}"

    - name: nginx (server) | Add host user to htpasswd
      htpasswd:
        path: "{{ item.htpasswd }}"
        name: "{{ item.name }}"
        password: "{{ item.pw }}"
        create: yes
        state: present
      loop: "{{ _nginx_host_shares }}"
      delegate_to: "{{ item.server }}"
      notify:
        - restart nginx

    - name: nginx (server) | Create share config
      template:
        src: 'share.conf'
        force: yes
        backup: yes
        dest: "{{ item.dest }}"
      loop: "{{ _nginx_host_shares }}"
      delegate_to: "{{ item.server }}"
      notify:
        - restart nginx

    - name: nginx (server) | Create default 403 location
      template:
        src: 'share_default.conf'
        force: yes
        backup: yes
        dest: "{{ item.default_dest }}"
      loop: "{{ _nginx_host_shares }}"
      delegate_to: "{{ item.server }}"
      notify:
        - restart nginx

  when: _nginx_host_shares != []

- block:
    - name: nginx (server) | Create rproxy config
      template:
        src: 'rproxy.conf'
        force: yes
        backup: yes
        dest: "{{ item.dest }}"
      loop: "{{ _nginx_host_rproxy }}"
      delegate_to: "{{ item.server }}"
      notify:
        - restart nginx

  when: _nginx_host_rproxy != []

