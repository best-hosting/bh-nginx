---

- block:
    - name: define | Add all vhosts, if run on server
      set_fact:
        _nginx_run_vhosts: >-
          {{ (_nginx_run_vhosts + [{ 'vhost' : item, 'server' : inventory_hostname }])
                | unique
          }}
      when: nginx_vhosts is defined
      loop: "{{ nginx_vhosts.keys() }}"

    - name: define | Show list of vhosts to configure
      debug:
        var: _nginx_run_vhosts

- block:
    - name: define | Define nginx vhost server configs
      set_fact:
        _nginx_vhosts_all: >-
          {{ _nginx_vhosts_all
              + [ { 'server_name' : []
                  , 'root' : item_root
                  , 'access_log'  : item_access_log
                  , 'error_log'   : item_error_log
                  } | combine(vhost,
                        { 'host'        : item_host
                        , 'name'        : item_name
                        , 'listen'      : item_listen
                        , 'cert'        : item_cert
                        , 'privkey'     : item_privkey
                        , 'conf_include_d': item_dest + '.d'
                        , 'dest'        : item_dest
                        , 'rproxy_split_conf': vhost.split_conf | default(false)
                        , 'share_split_conf' : vhost.split_conf | default(true)
                        , 'link_to'     : item_link_to
                        }
                      )
                ]
          }}
      vars:
        item_host: >-
          {{ item.server }}
        item_name: >-
          {{ item.vhost }}
        vhost: >-
          {{ hostvars[item_host].nginx_vhosts[item_name] }}
        item_root: >-
          {{ hostvars[item_host].nginx_root | default('/var/www') + '/' + item_name }}
        item_access_log: >-
          {{ hostvars[item_host].nginx_log_dir + '/' + item_name + '-access.log'
              if hostvars[item_host].nginx_log_dir is defined
              else ''
          }}
        item_error_log: >-
          {{ hostvars[item_host].nginx_log_dir + '/' + item_name + '-error.log'
              if hostvars[item_host].nginx_log_dir is defined
              else ''
          }}
        item_listen: >-
          {{ item.listen | ipaddr('address') if item.listen is defined else '' }}
        item_cert: >-
          {{ vhost.cert | default(hostvars[item_host].nginx_cert) }}
        item_privkey: >-
          {{ vhost.privkey | default(hostvars[item_host].nginx_privkey) }}
        item_dest: >-
          {{ hostvars[item_host].nginx_conf_dir | default('/etc/nginx')
              + '/sites-available/' + item_name
          }}
        item_link_to: >-
          {{ hostvars[item_host].nginx_conf_dir | default('/etc/nginx')
              + '/sites-enabled/' + item_name
          }}
      loop: "{{ _nginx_run_vhosts }}"

    - name: define | Define nginx share host configs
      set_fact:
        _nginx_host_shares: >-
          {{  _nginx_host_shares
                + [ item | combine(
                      { 'name'  : item_name
                      , 'conf_include_d' : item_conf_include_d
                      , 'dest'  : item_conf_include_d
                                    + ( '/share-' + item_name + '.conf'
                                        if item_vhost_conf.share_split_conf
                                          else '/share.conf'
                                      )
                      , 'default_dest'  :   item_conf_include_d + '/share-default.conf'
                      , 'htpasswd': item_conf_include_d + '/' + item_name + '.htpasswd'
                      , 'root'  : item_root
                      , 'split_conf' : item_vhost_conf.share_split_conf
                      , 'pw' : lookup('file',
                                    lookup('first_found',
                                      [ 'htpasswords/' + inventory_hostname + '/' + item_name
                                      , 'htpasswords/' + inventory_hostname + '/default'
                                      , 'htpasswords/default'
                                      ])
                                    )
                      }
                    )
                  ]
          }}
      vars:
        item_vhost_conf: >-
          {{ _nginx_vhosts_all
              | selectattr('name', 'equalto', item.vhost)
              | first
          }}
        item_name: >-
          {{ inventory_hostname }}
        item_conf_include_d: >-
          {{ item_vhost_conf.conf_include_d }}
        item_root: >-
          {{ item_vhost_conf.root + '/' + item_name }}
      loop: "{{ nginx_host_shares }}"

    - name: define | Define nginx rproxy host configs
      set_fact:
        _nginx_host_rproxy: >-
          {{  _nginx_host_rproxy
                + [ item | combine(
                      { 'name'  : item_name
                      , 'conf_include_d' : item_conf_include_d
                      , 'dest'  : item_conf_include_d
                                    + ( '/rproxy-' + item_name + '.conf'
                                        if item_vhost_conf.rproxy_split_conf
                                          else '/rproxy.conf'
                                      )
                      , 'split_conf' : item_vhost_conf.rproxy_split_conf
                      }
                    )
                  ]
          }}
      vars:
        item_vhost_conf: >-
          {{ _nginx_vhosts_all
              | selectattr('name', 'equalto', item.vhost)
              | first
          }}
        item_name: >-
          {{ inventory_hostname }}
        item_conf_include_d: >-
          {{ item_vhost_conf.conf_include_d }}
      loop: "{{ nginx_host_rproxy }}"

- block:
    - name: define | Show all nginx vhost configs
      debug:
        var: _nginx_vhosts_all

    - name: define | Show nginx host share configs
      debug:
        var: _nginx_host_shares

    - name: define | Show nginx host rproxy configs
      debug:
        var: _nginx_host_rproxy

- block:
    - name: define | Stat shares cache file
      stat:
        path: "{{ _nginx_shares_cache_file }}"
      register: _nginx_shares_cache_file_stats

    - name: define | Stat rproxy cache file
      stat:
        path: "{{ _nginx_rproxy_cache_file }}"
      register: _nginx_rproxy_cache_file_stats

  run_once: true
  delegate_to: localhost

- block:
    - name: define | Load shares cache
      include_vars:
        file: "{{ _nginx_shares_cache_file }}"
        name: _nginx_shares_cache_r
      when: _nginx_shares_cache_file_stats.stat.exists

    - name: define | Load rproxy cache
      include_vars:
        file: "{{ _nginx_rproxy_cache_file }}"
        name: _nginx_rproxy_cache_r
      when: _nginx_rproxy_cache_file_stats.stat.exists

    - name: define | Loaded shares cache
      debug:
        var: _nginx_shares_cache_r

    - name: define | Loaded rproxy cache
      debug:
        var: _nginx_rproxy_cache_r

  run_once: true

- block:
    # FIXME: Here 'combine()''s 'list_merge' strategy implemented manually.
    # Raise ansible version to make most part of this boilerplate redundant.
    - name: define | Build shares cache for playbook hosts
      set_fact:
        _nginx_shares_all: >-
          {{ _nginx_shares_all | combine(
                { item.1.vhost :
                  { 'vhost'       : item.1.vhost
                  , 'servers'     : ([item.1.server] + value_servers + cached_servers) | unique
                  , item.1.server : ([item_name]     + value_server  + cached_server)  | unique
                  }
                }
              )
          }}
      vars:
        item_name: >-
          {{ item.0.inventory_hostname }}
        cached_vhost: >-
          {{ _nginx_shares_cache_r[item.1.vhost]
              if _nginx_shares_cache_r[item.1.vhost] is defined
                else {}
          }}
        cached_server: >-
          {{ cached_vhost[item.1.server] if cached_vhost[item.1.server] is defined else [] }}
        cached_servers: >-
          {{ cached_vhost['servers'] if cached_vhost['servers'] is defined else [] }}
        value_vhost: >-
          {{ _nginx_shares_all[item.1.vhost]
              if _nginx_shares_all[item.1.vhost] is defined
                else {}
          }}
        value_server: >-
          {{ value_vhost[item.1.server] if value_vhost[item.1.server] is defined else [] }}
        value_servers: >-
          {{ value_vhost['servers'] if value_vhost['servers'] is defined else [] }}
      loop: >-
        {{ hostvars.values() | subelements('_nginx_host_shares', skip_missing=True) }}

    - name: define | Build rproxy cache for playbook hosts
      set_fact:
        _nginx_rproxy_all: >-
          {{ _nginx_rproxy_all | combine(
                { item.1.vhost :
                  { 'vhost'       : item.1.vhost
                  , 'servers'     : ([item.1.server] + value_servers + cached_servers) | unique
                  , item.1.server : ([item_name]     + value_server  + cached_server)  | unique
                  }
                }
              )
          }}
      vars:
        item_name: >-
          {{ item.0.inventory_hostname }}
        cached_vhost: >-
          {{ _nginx_rproxy_cache_r[item.1.vhost]
              if _nginx_rproxy_cache_r[item.1.vhost] is defined
                else {}
          }}
        cached_server: >-
          {{ cached_vhost[item.1.server] if cached_vhost[item.1.server] is defined else [] }}
        cached_servers: >-
          {{ cached_vhost['servers'] if cached_vhost['servers'] is defined else [] }}
        value_vhost: >-
          {{ _nginx_rproxy_all[item.1.vhost]
              if _nginx_rproxy_all[item.1.vhost] is defined
                else {}
          }}
        value_server: >-
          {{ value_vhost[item.1.server] if value_vhost[item.1.server] is defined else [] }}
        value_servers: >-
          {{ value_vhost['servers'] if value_vhost['servers'] is defined else [] }}
      loop: >-
        {{ hostvars.values() | subelements('_nginx_host_rproxy', skip_missing=True) }}

    - name: define | Show shares cache
      debug:
        var: _nginx_shares_all

    - name: define | Show rproxy cache
      debug:
        var: _nginx_rproxy_all

  run_once: true

- block:
    - name: define | Update shares cache
      set_fact:
        _nginx_shares_cache: >-
          {{ _nginx_shares_cache_r | combine(_nginx_shares_all) }}

    - name: define | Update rproxy cache
      set_fact:
        _nginx_rproxy_cache: >-
          {{ _nginx_rproxy_cache_r | combine(_nginx_rproxy_all) }}

    - name: define | Save shares cache
      copy:
        content: "{{ _nginx_shares_cache | to_yaml }}"
        dest: "{{ _nginx_shares_cache_file }}"

    - name: define | Save rproxy cache
      copy:
        content: "{{ _nginx_rproxy_cache | to_yaml }}"
        dest: "{{ _nginx_rproxy_cache_file }}"

  delegate_to: localhost
  run_once: true

- block:
    - name: define | Check for vhosts used for both share and rproxy
      assert:
        that:
          - not same_vhosts
        fail_msg: >-
          {{ "The same vhost name can't be used for both share and rproxy."
                + " Now the same vhosts are: " + same_vhosts | join(',')
          }}
      # ' - fix vim highlightning.
      vars:
        same_vhosts: >-
          {{ _nginx_shares_cache.keys() | intersect(_nginx_rproxy_cache.keys()) }}
      run_once: true

    - name: define | Check for several hosts using shares in single conf mode
      assert:
        that:
          - vhost_used_by | length == 1
        fail_msg: >-
          {{ "Vhost '" + item.vhost + "' in single conf mode used by several hosts: "
                + vhost_used_by | join(',') + "."
          }}
      # ' - fix vim highlightning.
      when: not item.split_conf
      vars:
        vhost_used_by: >-
          {{ _nginx_shares_cache[item.vhost][item.server] }}
      loop: >-
        {{ _nginx_host_shares }}

    - name: define | Check for several hosts using rproxy in single conf mode
      assert:
        that:
          - vhost_used_by | length == 1
        fail_msg: >-
          {{ "Rproxy vhost '" + item.vhost + "' in single conf mode used by several hosts: "
                + vhost_used_by | join(',') + "."
          }}
      # ' - fix vim highlightning.
      when: not item.split_conf
      vars:
        vhost_used_by: >-
          {{ _nginx_rproxy_cache[item.vhost][item.server] }}
      loop: >-
        {{ _nginx_host_rproxy }}

- name:
  assert:
    that:
      - 1 == 2

